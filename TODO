:: FOV algorithm and storing visible/fog of war glyph map ::

Keep a separate GridMap Glyph of the last visible tile state for the whole level,
where we store the highest priority INANIMATE glyph last seen,
so basically anything that is not an enemy. This will be used to
assign a glyph to the tiles outside of visible range

Furthermore, keep a separate GridMap Bool that is updated each player turn
that keeps track of visibility
and a GridMap Bool that keeps track of which tiles are vision-blocking
Potentially this could be isolated to some ST/IO mutable hash table
instead of a GridMap,
and computed in the handleEventZwerg function (which is MonadIO context)

Make a function to return the full Glyph for a player-visible tile,
and call this in the relevant UIBuiler

:: default components ::

This is tricky, perhaps.
Make a function that takes EntityType as argument, and
adds the 100% essential default components.
This is one way to help guard against the problem of forgetting to update
every generator when a new component is added.

:: breakdown of Glyph ::
separate Glyph into GlyphBasic and Glyph (which is just two GlyphBasic's,
one for player visible and one for out of player vision range (fog))

:: Errors ::
add StackTrace to ZError (only in GHC 8.2.X ?)
